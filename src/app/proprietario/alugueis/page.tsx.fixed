"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { reservasService } from "@/lib/api";
import { Reserva, StatusReserva } from "@/lib/types";
import { format, parseISO } from "date-fns";
import { ptBR } from "date-fns/locale";
import { 
  CheckCircle, 
  XCircle, 
  Calendar, 
  LogIn, 
  LogOut, 
  Users, 
  DollarSign,
  Info,
  Plus
} from "lucide-react";
import Link from "next/link";
import { toast as sonnerToast } from "sonner";

const formatDate = (dateString: string) => {
  try {
    return format(parseISO(dateString), "dd 'de' MMMM 'de' yyyy", { locale: ptBR });
  } catch (error) {
    console.error("Erro ao formatar data:", error);
    return dateString;
  }
};

const StatusBadge = ({ status }: { status: StatusReserva }) => {
  const getStatusInfo = () => {
    switch (status) {
      case "PENDENTE":
        return { color: "bg-amber-100 text-amber-800", icon: <Info className="h-3.5 w-3.5" /> };
      case "CONFIRMADA":
        return { color: "bg-blue-100 text-blue-800", icon: <CheckCircle className="h-3.5 w-3.5" /> };
      case "CHECKIN":
        return { color: "bg-green-100 text-green-800", icon: <LogIn className="h-3.5 w-3.5" /> };
      case "CHECKOUT":
        return { color: "bg-purple-100 text-purple-800", icon: <LogOut className="h-3.5 w-3.5" /> };
      case "FINALIZADA":
        return { color: "bg-green-100 text-green-800", icon: <CheckCircle className="h-3.5 w-3.5" /> };
      case "CANCELADA":
        return { color: "bg-red-100 text-red-800", icon: <XCircle className="h-3.5 w-3.5" /> };
      default:
        return { color: "bg-gray-100 text-gray-800", icon: <Info className="h-3.5 w-3.5" /> };
    }
  };

  const { color, icon } = getStatusInfo();

  return (
    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${color}`}>
      <span className="mr-1">{icon}</span>
      {status}
    </span>
  );
};

// Main component
export default function GerenciarAlugueis() {
  const [reservas, setReservas] = useState<Reserva[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [checkinsHoje, setCheckinsHoje] = useState<Reserva[]>([]);
  const [checkoutsHoje, setCheckoutsHoje] = useState<Reserva[]>([]);
  const router = useRouter();

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const data = await reservasService.getReservas();
        setReservas(data);
        
        // Filtrar check-ins e check-outs para hoje
        const hoje = new Date().toISOString().split('T')[0];
        const checkins = data.filter(r => 
          r.dataCheckIn.split('T')[0] === hoje && r.status === 'CONFIRMADA'
        );
        const checkouts = data.filter(r => 
          r.dataCheckOut.split('T')[0] === hoje && r.status === 'CHECKIN'
        );
        
        setCheckinsHoje(checkins);
        setCheckoutsHoje(checkouts);
      } catch (err) {
        console.error("Erro ao buscar reservas:", err);
        setError("Não foi possível carregar as reservas.");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleCheckin = async (reservaId: number) => {
    try {
      await reservasService.fazerCheckin(reservaId);
      sonnerToast.success("Check-in realizado com sucesso!");
      
      // Atualizar lista de reservas
      const updatedReservas = reservas.map(r => {
        if (r.id === reservaId) {
          return { ...r, status: 'CHECKIN' as StatusReserva };
        }
        return r;
      });
      
      setReservas(updatedReservas);
      setCheckinsHoje(checkinsHoje.filter(r => r.id !== reservaId));
    } catch (error) {
      sonnerToast.error("Erro ao fazer check-in. Tente novamente.");
      console.error("Erro ao fazer check-in:", error);
    }
  };

  const handleCheckout = async (reservaId: number) => {
    try {
      await reservasService.fazerCheckout(reservaId);
      sonnerToast.success("Check-out realizado com sucesso!");
      
      // Atualizar lista de reservas
      const updatedReservas = reservas.map(r => {
        if (r.id === reservaId) {
          return { ...r, status: 'CHECKOUT' as StatusReserva };
        }
        return r;
      });
      
      setReservas(updatedReservas);
      setCheckoutsHoje(checkoutsHoje.filter(r => r.id !== reservaId));
    } catch (error) {
      sonnerToast.error("Erro ao fazer check-out. Tente novamente.");
      console.error("Erro ao fazer check-out:", error);
    }
  };

  const handleConfirmarReserva = async (reservaId: number) => {
    try {
      await reservasService.confirmarReserva(reservaId);
      sonnerToast.success("Reserva confirmada com sucesso!");
      
      // Atualizar lista de reservas
      const updatedReservas = reservas.map(r => {
        if (r.id === reservaId) {
          return { ...r, status: 'CONFIRMADA' as StatusReserva };
        }
        return r;
      });
      
      setReservas(updatedReservas);
    } catch (error) {
      sonnerToast.error("Erro ao confirmar reserva. Tente novamente.");
      console.error("Erro ao confirmar reserva:", error);
    }
  };

  const handleCancelarReserva = async (reservaId: number) => {
    try {
      await reservasService.cancelarReserva(reservaId);
      sonnerToast.success("Reserva cancelada com sucesso!");
      
      // Atualizar lista de reservas
      const updatedReservas = reservas.map(r => {
        if (r.id === reservaId) {
          return { ...r, status: 'CANCELADA' as StatusReserva };
        }
        return r;
      });
      
      setReservas(updatedReservas);
    } catch (error) {
      sonnerToast.error("Erro ao cancelar reserva. Tente novamente.");
      console.error("Erro ao cancelar reserva:", error);
    }
  };

  const handleFinalizarReserva = async (reservaId: number) => {
    try {
      await reservasService.finalizarReserva(reservaId);
      sonnerToast.success("Reserva finalizada com sucesso!");
      
      // Atualizar lista de reservas
      const updatedReservas = reservas.map(r => {
        if (r.id === reservaId) {
          return { ...r, status: 'FINALIZADA' as StatusReserva };
        }
        return r;
      });
      
      setReservas(updatedReservas);
    } catch (error) {
      sonnerToast.error("Erro ao finalizar reserva. Tente novamente.");
      console.error("Erro ao finalizar reserva:", error);
    }
  };

  const getActionButtons = (reserva: Reserva) => {
    switch (reserva.status) {
      case 'PENDENTE':
        return (
          <>
            <Button 
              onClick={() => handleConfirmarReserva(reserva.id)} 
              className="text-xs mr-2 bg-blue-600 hover:bg-blue-700" 
              size="sm"
            >
              <CheckCircle size={14} className="mr-1" /> Confirmar
            </Button>
            <Button 
              onClick={() => handleCancelarReserva(reserva.id)} 
              variant="destructive" 
              className="text-xs" 
              size="sm"
            >
              <XCircle size={14} className="mr-1" /> Cancelar
            </Button>
          </>
        );
      case 'CONFIRMADA':
        return (
          <Button 
            onClick={() => handleCheckin(reserva.id)} 
            className="text-xs bg-green-600 hover:bg-green-700" 
            size="sm"
          >
            <LogIn size={14} className="mr-1" /> Check-in
          </Button>
        );
      case 'CHECKIN':
        return (
          <Button 
            onClick={() => handleCheckout(reserva.id)} 
            className="text-xs bg-purple-600 hover:bg-purple-700" 
            size="sm"
          >
            <LogOut size={14} className="mr-1" /> Check-out
          </Button>
        );
      case 'CHECKOUT':
        return (
          <Button 
            onClick={() => handleFinalizarReserva(reserva.id)} 
            className="text-xs bg-emerald-600 hover:bg-emerald-700" 
            size="sm"
          >
            <CheckCircle size={14} className="mr-1" /> Finalizar
          </Button>
        );
      default:
        return null;
    }
  };

  return (
    <div className="container mx-auto py-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Gerenciar Aluguéis</h1>
        <Link href="/proprietario/alugueis/criar">
          <Button className="bg-emerald-600 hover:bg-emerald-700">
            <Plus size={18} className="mr-1" /> Nova Reserva
          </Button>
        </Link>
      </div>

      {/* Check-ins e Check-outs de Hoje */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-lg flex items-center">
              <LogIn className="mr-2 h-5 w-5 text-green-600" /> Check-ins de Hoje
            </CardTitle>
          </CardHeader>
          <CardContent>
            {checkinsHoje.length > 0 ? (
              <div className="space-y-3">
                {checkinsHoje.map(reserva => (
                  <div key={reserva.id} className="p-3 bg-green-50 rounded-md flex justify-between items-center">
                    <div>
                      <p className="font-medium">{reserva.hospede?.nome}</p>
                      <p className="text-sm text-gray-500">{reserva.casa?.nome}</p>
                    </div>
                    <Button 
                      onClick={() => handleCheckin(reserva.id)}
                      size="sm" 
                      className="bg-green-600 hover:bg-green-700"
                    >
                      Check-in
                    </Button>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-center py-4 text-gray-500">Nenhum check-in para hoje</p>
            )}
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-lg flex items-center">
              <LogOut className="mr-2 h-5 w-5 text-purple-600" /> Check-outs de Hoje
            </CardTitle>
          </CardHeader>
          <CardContent>
            {checkoutsHoje.length > 0 ? (
              <div className="space-y-3">
                {checkoutsHoje.map(reserva => (
                  <div key={reserva.id} className="p-3 bg-purple-50 rounded-md flex justify-between items-center">
                    <div>
                      <p className="font-medium">{reserva.hospede?.nome}</p>
                      <p className="text-sm text-gray-500">{reserva.casa?.nome}</p>
                    </div>
                    <Button 
                      onClick={() => handleCheckout(reserva.id)}
                      size="sm" 
                      className="bg-purple-600 hover:bg-purple-700"
                    >
                      Check-out
                    </Button>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-center py-4 text-gray-500">Nenhum check-out para hoje</p>
            )}
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader className="pb-3">
          <CardTitle>Todas as Reservas</CardTitle>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="flex justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
            </div>
          ) : error ? (
            <div className="text-center py-8 text-red-500">{error}</div>
          ) : reservas.length > 0 ? (
            <div className="overflow-x-auto">
              <table className="w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Hospede</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Casa</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Check-in</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Check-out</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Valor</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ações</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {reservas.map((reserva) => (
                    <tr key={reserva.id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="ml-0">
                            <div className="text-sm font-medium text-gray-900">{reserva.hospede?.nome}</div>
                            <div className="text-sm text-gray-500">{reserva.hospede?.email}</div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{reserva.casa?.nome}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{formatDate(reserva.dataCheckIn)}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{formatDate(reserva.dataCheckOut)}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(reserva.valorTotal)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <StatusBadge status={reserva.status} />
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center space-x-2">
                          {getActionButtons(reserva)}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <div className="text-center py-8 border border-dashed rounded-md">
              <Calendar className="mx-auto h-12 w-12 text-gray-400" />
              <p className="mt-2 text-gray-500">Nenhuma reserva encontrada</p>
              <Button 
                onClick={() => router.push('/proprietario/alugueis/criar')}
                className="mt-4 bg-emerald-600 hover:bg-emerald-700"
              >
                <Plus size={18} className="mr-1" /> Criar Nova Reserva
              </Button>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
